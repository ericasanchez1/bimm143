---
title: "Class 7: Machine Learning 1"
author: "Erica Sanchez (PID:15787505)"
format: pdf
---

Today we will start our multi-part exploration of some key machine learning methods. We will begin with clusetering - finding groupings in data, and then dimensionallity reduction. 


## Clustering

Let's start with "k-means" cluster
The main function in base R for this `kmeans()`.

```{r}
# Make up some data
hist(rnorm(100000, mean = 3))
```


```{r}
tmp <- c(rnorm(30, -3), rnorm(30, +3))
x <- cbind(x=tmp, y=rev(tmp))
plot(x)
```


Now let's try out `kmeans()`

```{r}
km <- kmeans(x, centers=2)
km
```

```{r}
attributes(km)
```

> Q. How many points in each cluster?

```{r}
km$size
```

> Q. What component of your result object details cluster assignment/membership?

```{r}
km$cluster
```

> Q. What are centers/mean values of each cluster?

```{r}
km$centers
```

> Q. Make a plot of your data showing your clustering results.

```{r}
plot(x, col=km$cluster)
points(km$centers, col="purple", pch=15, cex=3)
```


> Q. Run `kmeans()` again and cluster in 4 groups and plot the results.

```{r}
km4 <- kmeans(x, centers=4)
plot(x, col=km4$cluster)
```


## Hierarchical Clustering

This form of clustering aims to reveal the structure in your data by progressively grouping points into a ever smaller number of clusters.

The main function in base R for this is called `hclust()`. This function does not take our input data directly but wants a "distance matrix" that details how (dis)similar all our input points are to each other. 


```{r}
hc <- hclust( dist(x) )
hc
```

The print out above is not very useful (unlike that from kmeans) but there is a useful `plot()` method.

```{r}
plot(hc)
abline(h=10, col="red")
```


To get my main result (my cluster membership vector) I need to "cut" my tree using the function `cutree()`

```{r}
grps <- cutree(hc, h=10)
grps
```


```{r}
plot(x, col=grps)
```

```{r}
plot(x, col=cutree(hc, h=6))
```



# Principal Component Analysis (PCA)

The goal of PCA is to reduce the dimensionality of a dataset down to some smaller subset of new variables (called PCs) that are useful bases for further analysis, like visualization, clustering, etc.

```{r}
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url, row.names=1)
x
```

> Q1. How many rows and columns are in your new data frame named x? What R functions could you use to answer this questions?

```{r}
dim(x)
```

# Preview the first 6 rows

```{r}
rownames(x) <- x[,1]
x <- x[,-1]
head(x)
```


```{r}
head(x)
```

> Q2. Which approach to solving the ‘row-names problem’ mentioned above do you prefer and why? Is one approach more robust than another under certain circumstances?

I prefer using x <- read.csv(url, row.names=1) because it looks cleaner to have the column removed while it's being read. Using the "rownames()" approach will remove the first unamed column each time, so it could lead to issues when analyzing data.

> Q3: Changing what optional argument in the below barplot() function results in the following plot? 

```{r}
barplot(as.matrix(x), beside=T, col=rainbow(nrow(x)))
```


```{r}
barplot(as.matrix(x), col=rainbow(nrow(x)))
```

The so-called "pairs" plot can be useful for small datasets: 

```{r}
pairs(x, col=rainbow(nrow(x)))
```

> Q5: Generating all pairwise plots may help somewhat. Can you make sense of the following code and resulting figure? What does it mean if a given point lies on the diagonal for a given plot?

```{r}
pairs(x, col=rainbow(10), pch=16)
```

If a point lies on the diagonal line for a given plot, then the points have identical values. 

> Q6. What is the main differences between N. Ireland and the other countries of the UK in terms of this data-set?

They do not follow the diaganol line as much as the other countries of the UK.


So the pairs plot is useful for small datasets but it can be lots of work to intercept and gets untraceable for larger datasets. 

So PCA to the rescue...

The main function to do PCA in base R is called `prcomp()`. This function wants the transpose of our data in this case. 

```{r}
pca <- prcomp(t(x))
summary(pca)
```
```{r}
attributes(pca)
```
```{r}
pca$x
```
A major PCA result viz is called a "PCA plot" (aka a score plot, biplot, PC1 vs PC2 plot, ordination plot)

> Q7. Complete the code to generate a plot of PC1 vs PC2.

> Q8. Customize your plot so that the colors of the country names match the colors in our UK and Ireland map and table at start of this document.

```{r}
# Plot PC1 vs PC2
mycols <- c("orange", "red", "blue", "darkgreen")
plot(pca$x[,1], pca$x[,2], col=mycols, pch=16,
     xlab="PC1", ylab="PC2")
abline(h=0, col="gray")
abline(v=0, col="gray")
```


Another important output from PCA is called "loadings" vector or the "rotation" componenet - this tells us how much the original variables (the foods in this case) contribute to the new PCs.

```{r}
pca$rotation
```

PCA looks to be a super useful method for gaining some insight into high dimensional data that is difficult to examine in other ways.


# PCA of RNASeq data 

```{r}
url2 <- "https://tinyurl.com/expression-CSV"
rna.data <- read.csv(url2, row.names=1)
head(rna.data)
```

```{r}
## Again we have to take the transpose of our data 
pca <- prcomp(t(rna.data), scale=TRUE)
```

```{r}
summary(pca)
```

> Q. How many genes in this dataset?

```{r}
nrow(rna.data)
```

```{r}
attributes(pca)
```
```{r}
head(pca$x)
```

I will make a main result figure use ggplot:

```{r}
library(ggplot2)
```

```{r}
res <- as.data.frame(pca$x)
```


```{r}
mycols <- c(rep("blue", 5), rep("red",5))
mycols
```


```{r}
ggplot(res) +
  aes(PC1, PC2, label=row.names(res)) +
  geom_label()
```

```{r}
colnames(rna.data)
```

```{r}
res <- as.data.frame(pca$x)
```

```{r}
mycols <- c(rep("blue", 5), rep("red",5))
mycols
```


```{r}
ggplot(res) +
  aes(PC1, PC2, label=row.names(res)) +
  geom_point()
```

```{r}
kmeans(pca$x[,1], centers=2)
```













